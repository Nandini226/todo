{"version":3,"sources":["TodoItems.js","Todos.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","React","Component","backgroung","border","color","borderRadius","cursor","float","Todos","map","key","headerStyle","textAlign","Header","App","state","setState","filter","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAGMA,G,mNAEFC,SAAS,WACT,MAAM,CACFC,WAAY,UACZC,QAAQ,OACRC,aAAa,kBACbC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAe,S,uDAMtD,IAAD,EACYC,KAAKH,MAAMC,KAArBG,EADF,EACEA,GAAGC,EADL,EACKA,MACT,OACR,yBAAKC,MAAOH,KAAKR,YACb,2BACI,2BAAOY,KAAK,WACXC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAKC,KAAQ,GACpDC,EACD,4BAAQC,MAAOK,EAAUC,QAAST,KAAKH,MAAMa,QAAQH,KAAKP,KAAKC,IAA/D,W,GArBgBU,IAAMC,YA6BxBJ,EAAS,CACXK,WAAW,UACXC,OAAO,OACPC,MAAM,MACNrB,QAAQ,UACRsB,aAAa,MACbC,OAAO,UACPC,MAAM,SAYK3B,IC7BA4B,E,uKAhBd,IAAD,OACA,OAAOnB,KAAKH,MAAMC,KAAKsB,KAAI,SAACtB,GAAD,OAC3B,kBAAC,EAAD,CAAWuB,IAAKvB,EAAKG,GAAIH,KAAMA,EAAMQ,aAAc,EAAKT,MAAMS,aAAcI,QAAS,EAAKb,MAAMa,iB,GAL5EC,IAAMC,W,OCQzB,IAAMU,EAAY,CACf7B,WAAW,QACXC,QAAQ,OACRqB,MAAM,QACNQ,UAAU,UAECC,EAff,WACA,OACI,4BAAQrB,MAAOmB,GACX,2CCgDOG,E,4MAjDbC,MAAM,CACJ5B,KAAK,CACH,CAACG,GAAG,EAAEC,MAAM,yBAAyBH,WAAU,GAC/C,CAACE,GAAG,EAAEC,MAAM,wBAAwBH,WAAU,GAC9C,CAACE,GAAG,EAAEC,MAAM,gBAAgBH,WAAU,GACtC,CAACE,GAAG,EAAEC,MAAM,kBAAkBH,WAAU,GACxC,CAACE,GAAG,EAAEC,MAAM,gBAAgBH,WAAU,GACtC,CAACE,GAAG,EAAEC,MAAM,kBAAkBH,WAAU,GACxC,CAACE,GAAG,EAAEC,MAAM,mBAAmBH,WAAU,GACzC,CAACE,GAAG,EAAEC,MAAM,mBAAmBH,WAAU,K,EAI7CW,QAAQ,SAACT,GACP,EAAK0B,SACH,CACE7B,KAAK,YAAI,EAAK4B,MAAM5B,KAAK8B,QAAO,SAAA9B,GAAI,OAClCA,EAAKG,KAAKA,S,EAKlBK,aAAa,SAACL,GACf,EAAK0B,SAAS,CAAC7B,KAChB,EAAK4B,MAAM5B,KAAKsB,KAAI,SAAAtB,GAIlB,OAHGA,EAAKG,IAAIA,IACVH,EAAKC,WAAWD,EAAKC,WAEhBD,Q,uDAMP,OACE,yBAAK+B,UAAU,OACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAO/B,KAAME,KAAK0B,MAAM5B,KAAMQ,aAAcN,KAAKM,aAAeI,QAASV,KAAKU,e,GAtC5DC,IAAMC,WCSJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc992b14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './TodoItems.css';\r\nclass TodoItems extends React.Component{\r\n    // this.markComplete=this.markComplete.bind(this);\r\n    getStyle=()=>{\r\n    return{\r\n        background: '#f4f4f4',\r\n        padding:'10px',\r\n        borderBottom:'1px #ccc dotted',\r\n        textDecoration: this.props.todo.completed ? 'line-through':'none'\r\n    }\r\n}\r\n\r\n\r\n\r\n    render(){\r\n        const{id,title}=this.props.todo;\r\n        return (\r\n<div style={this.getStyle()}>\r\n    <p>\r\n        <input type=\"checkbox\"\r\n         onChange={this.props.markComplete.bind(this,id)} />{''}\r\n        {title}\r\n        <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>x</button>\r\n        </p>\r\n</div>\r\n\r\n)\r\n    }\r\n}\r\n\r\nconst btnStyle={\r\n    backgroung:'#ff0000',\r\n    border:'none',\r\n    color:'red',\r\n    padding:'5px 9px',\r\n    borderRadius:'50%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n}\r\n\r\n\r\n\r\n\r\n\r\nTodoItems.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\n\r\nexport default TodoItems;","import React from \"react\";\r\nimport TodoItems from './TodoItems.js' ;\r\nimport PropTypes from 'prop-types';\r\nclass Todos extends React.Component{\r\n\r\n    render()\r\n{\r\nreturn this.props.todo.map((todo)=>(\r\n<TodoItems key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n\r\n\r\n));\r\n\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nTodos.propTypes = {\r\n    todo: PropTypes.array.isRequired\r\n}\r\nexport default Todos;","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nfunction Header(){\r\nreturn(\r\n    <header style={headerStyle}>\r\n        <h1>Todo List</h1>\r\n    </header>\r\n)\r\n\r\n\r\n}\r\n const headerStyle={\r\n    background:'black',\r\n    padding:'10px',\r\n    color:'white',\r\n    textAlign:'center'\r\n}\r\nexport default Header;","import React from \"react\";\nimport Todos from \"./Todos\";\nimport Header from \"./Header\";\nclass App extends React.Component{\n  state={\n    todo:[\n      {id:1,title:\" Do your peronal stuff\",completed:true},\n      {id:2,title:\"Meeting for an intern\",completed:false},\n      {id:3,title:\"Do your hobby\",completed:false},\n      {id:4,title:\"Cook for guests\",completed:false},\n      {id:5,title:\"Make your bed\",completed:false},\n      {id:6,title:\"Clean your room\",completed:false},\n      {id:7,title:\"Study for  Exams\",completed:false},\n      {id:8,title:\"Water the plants\",completed:false},\n\n    ]\n  }\n  delTodo=(id)=>{\n    this.setState(\n      {\n        todo:[...this.state.todo.filter(todo=>\n          todo.id!==id)]\n        \n      }\n    );\n  }\n  markComplete=(id)=>{\n this.setState({todo:\nthis.state.todo.map(todo=>{\n  if(todo.id==id){\n    todo.completed=!todo.completed\n  }\n  return todo;\n})\n});\n}\nrender(){\n\n  return(\n    <div className=\"App\">\n<Header />\n<Todos todo={this.state.todo} markComplete={this.markComplete}  delTodo={this.delTodo}/>\n\n    </div>\n  );\n\n}\n\n\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}